experiment.name = gecco-improving
experiment.seed = 123
experiment.target.0 = class=GenerationsTarget, generations=2

# othello
othello.interaction = class=OthelloWPCInteraction, playBoth=true

# evolution parameters
operators.0 = class=WPCUniformMutation, probability=1, min=-0.1, max=0.1
operators.1 = class=WPCUniformMutation, probability=0.2, min=-0.1, max=0.1

evolution.candidatesFactory.0 = class=MutatingPopulationFactory, individualFactory=${class=WPCIndividualFactory; minWeight=-0.2; maxWeight=0.2; wpcLength=64}, mutation=${operators.0}
evolution.candidatesFactory.1 = class=WPCPopulationFactory, minWeight=-0.2, maxWeight=0.2, wpcLength=64
evolution.candidatesFactory.2 = class=WPCPopulationFactory, minWeight=-0.1, maxWeight=0.1, wpcLength=64

evolution.randomSampleFactory.0 = class=WPCPopulationFactory, minWeight=-10, maxWeight=10, wpcLength=64

evolution.model.0 = class=MuPlusLambdaEvolutionModel, mu=25 , lambda=25, mutation=${operators.0}
evolution.model.1 = class=MuPlusLambdaEvolutionModel, mu=25 , lambda=25, mutation=${operators.1}
evolution.model.2 = class=TruncationSelectionEvolutionModel , elites=20, mutation=${operators.1}, factory=${evolution.candidatesFactory.1}
evolution.model.3 = class=MuPlusLambdaEvolutionModel, mu=13 , lambda=13, mutation=${operators.1}

interactionScheme.0 = class=RoundRobinInteractionScheme, domain=${othello.interaction}
			
solutions.species = class=Species, aggregate=${class=SimpleSumFitness}, evolutionModel=${evolution.model.0}, \
	factory=${evolution.candidatesFactory.0}, populationSize=50

tests.species.0 = class=Species, aggregate=${class=SimpleSumFitness}, evolutionModel=${evolution.model.0}, \
	factory=${evolution.candidatesFactory.0}, populationSize=50
tests.species.1 = class=Species, aggregate=${class=DistinctionsFitnessSharing}, evolutionModel=${evolution.model.1}, \
	factory=${evolution.candidatesFactory.1}, populationSize=50
tests.species.2 = class=Species, aggregate=${class=DistinctionsFitnessSharing}, evolutionModel=${evolution.model.2}, \
	factory=${evolution.candidatesFactory.2}, populationSize=26	

#shaping.players = /home/pliskowski/research/dist-both-draw0.5-500000-2000-filtered-0.6.txt

# 1-pop algorithms
experiment.algorithm.0 = class=RandomSamplingEvolutionaryLearning, species=${solutions.species}, \
	interactionScheme=${interactionScheme.0}, randomSampleFactory=${evolution.randomSampleFactory.0}, \
	name=rsel, randomSampleSize=50, threads=1
	
experiment.algorithm.1 = class=OnePopulationCompetitiveCoevolution, species=${solutions.species}, \
	interactionScheme=${interactionScheme.0}, name=cel, threads=1

experiment.algorithm.2 = class=RandomSamplingHybridCoevolution, species=${solutions.species}, \
	interactionScheme=${interactionScheme.0}, randomSampleFactory=${evolution.randomSampleFactory.0}, \
	name=cel-rs, randomSampleSize=25, populationSampleSize=25, threads=1

#experiment.algorithm.3 = class=ShapedSamplingEvolutionaryLearning, species=${solutions.species}, \
#	interactionScheme=${interactionScheme.0}, loader=${class=LegacyWPCShapingPoolLoader}, \
#	name=ssel, shapingSampleSize=50, threads=1

# 2-pop algorithms
experiment.algorithm.4 = class=TwoPopulationCompetitiveCoevolution, solutionsSpecies=${solutions.species}, \ 
	testsSpecies=${tests.species.1}, interactionScheme=${interactionScheme.0}, name=2cel, threads=1

experiment.algorithm.5 = class=RandomSamplingTwoPopHybrid, solutionsSpecies=${solutions.species}, \
	testsSpecies=${tests.species.2}, interactionScheme=${interactionScheme.0}, \
	randomSampleFactory=${evolution.randomSampleFactory.0}, randomSampleSize=25, name=2cel-rs, threads=1
	
#experiment.algorithm.6 = class=ShapedSamplingTwoPopHybrid, solutionsSpecies=${solutions.species}, \
#	testsSpecies=${tests.species.2}, interactionScheme=${interactionScheme.0}, loader=${class=LegacyWPCShapingPoolLoader}, \
#	name=2cel-ss, shapingSampleSize=25, threads=1

# retrospection
experiment.retrospectionTask.0 = class=QueryRetrospectionTask, name=solution-meu, query=${class=BestOfGenerationSolutionQuery}, \
	context=${class=ExpectedUtility; sampleSize=25000; domain=${othello.interaction}; sampleFactory=${evolution.randomSampleFactory.0}}

# reports
reports.outputPath = ./experiments/gecco-improving/
reports.createSubdir = false

reports.0 = class=EvolutionHistoryReport
reports.1 = class=RetrospectionReport, tasks=*
reports.2 = class=TablesReport, provider=${class=FileDataProvider}, tablesReport=${class=HtmlTablesSaver}, tasks=*
reports.3 = class=ExperimentConfiguration
