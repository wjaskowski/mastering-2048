®experiment.name = fs-vs-dfs-vs-sf
experiment.seed = random
experiment.target.0 = class=GenerationsTarget, generations=20

# evolution parameters
operators.0 = class=WPCUniformMutation, probability=1, min=-0.1, max=0.1

evolution.candidatesFactory.0  = class=WPCPopulationFactory, minWeight=-0.1, maxWeight=0.1, wpcLength=64
evolution.individualsFactory.0 = class=WPCPopulationFactory, minWeight=-10, maxWeight=10, wpcLength=64

evolution.model.0 = class=MuPlusLambdaEvolutionModel, mu=25 , lambda=25, mutation=${operators.0}
evolution.model.1 = class=TruncationSelectionEvolutionModel , elites=20, mutation=${operators.0}, factory=${class=WPCPopulationFactory; minWeight=-0.2; maxWeight=0.2; wpcLength=64}

evaluator.0 = class=RoundRobinEvaluator, aggregate=${class=SimpleSumFitness}, interaction=${class=OthelloWPCInteraction; playBoth=true}
evaluator.1 = class=RoundRobinEvaluator, aggregate=${class=DistinctionsFitnessSharing}, interaction=${class=OthelloWPCInteraction; playBoth=true}
evaluator.2 = class=RoundRobinEvaluator, aggregate=${class=CompetitiveFitnessSharing}, interaction=${class=OthelloWPCInteraction; playBoth=true}

# 1-pop algorithms
# 1 cel
experiment.algorithm.0 = class=OnePopulationCompetitiveCoevolution, evolutionModel=${evolution.model.0}, \
	evaluator=${evaluator.0}, candidatesFactory=${evolution.candidatesFactory.0}, \
	name=cel-sf, populationSize=50, threads=1
	
experiment.algorithm.1 = class=OnePopulationCompetitiveCoevolution, evolutionModel=${evolution.model.0}, \
	evaluator=${evaluator.2}, candidatesFactory=${evolution.candidatesFactory.0}, \
	name=cel-fs, populationSize=50, threads=1

# 1 cel-rs
experiment.algorithm.2 = class=RandomSamplingHybridCoevolution, evolutionModel=${evolution.model.0}, \
	evaluator=${evaluator.0}, candidatesFactory=${evolution.candidatesFactory.0}, \
	individualsFactory=${evolution.individualsFactory.0}, \
	name=cel-rs-sf, populationSize=50, randomSample=25, populationSample=25, threads=1
	
experiment.algorithm.3 = class=RandomSamplingHybridCoevolution, evolutionModel=${evolution.model.0}, \
	evaluator=${evaluator.2}, candidatesFactory=${evolution.candidatesFactory.0}, \
	individualsFactory=${evolution.individualsFactory.0}, \
	name=cel-rs-fs, populationSize=50, randomSample=25, populationSample=25, threads=1
	
# 2-pop algorithms
# 2cel
experiment.algorithm.4 = class=TwoPopulationCompetitiveCoevolution, name=2cel-sf, threads=8, \ 
	solutions=${class=Population; evolutionModel=${evolution.model.0}; evaluator=${evaluator.0}; factory=${evolution.candidatesFactory.0}; populationSize=50}, \
	tests=${class=Population; evolutionModel=${evolution.model.0}; evaluator=${evaluator.0}; factory=${evolution.candidatesFactory.0}; populationSize=50} 	
	
experiment.algorithm.5 = class=TwoPopulationCompetitiveCoevolution, name=2cel-dfs, threads=1, \ 
	solutions=${class=Population; evolutionModel=${evolution.model.0}; evaluator=${evaluator.0}; factory=${evolution.candidatesFactory.0}; populationSize=50}, \
	tests=${class=Population; evolutionModel=${evolution.model.0}; evaluator=${evaluator.1}; factory=${evolution.candidatesFactory.0}; populationSize=50}

experiment.algorithm.6 = class=TwoPopulationCompetitiveCoevolution, name=2cel-fs, threads=1, \ 
	solutions=${class=Population; evolutionModel=${evolution.model.0}; evaluator=${evaluator.0}; factory=${evolution.candidatesFactory.0}; populationSize=50}, \
	tests=${class=Population; evolutionModel=${evolution.model.0}; evaluator=${evaluator.2}; factory=${evolution.candidatesFactory.0}; populationSize=50}

# 2cel-rs
experiment.algorithm.7 = class=RandomSamplingTwoPopHybrid, name=2cel-rs-sf, randomSample=25, threads=1, \ 
	solutions=${class=Population; evolutionModel=${evolution.model.0}; evaluator=${evaluator.0}; factory=${evolution.candidatesFactory.0}; populationSize=50}, \
	tests=${class=Population; evolutionModel=${evolution.model.1}; evaluator=${evaluator.0}; factory=${evolution.candidatesFactory.0}; populationSize=26}, \
	testsFactory=${evolution.individualsFactory.0} 	

experiment.algorithm.8 = class=RandomSamplingTwoPopHybrid, name=2cel-rs-dfs, randomSample=25, threads=1, \
	solutions=${class=Population; evolutionModel=${evolution.model.0}; evaluator=${evaluator.0}; factory=${evolution.candidatesFactory.0}; populationSize=50}, \
	tests=${class=Population; evolutionModel=${evolution.model.1}; evaluator=${evaluator.1}; factory=${evolution.candidatesFactory.0}; populationSize=26}, \
	testsFactory=${evolution.individualsFactory.0}

experiment.algorithm.9 = class=RandomSamplingTwoPopHybrid, name=2cel-rs-fs, randomSample=25, threads=1, \ 
	solutions=${class=Population; evolutionModel=${evolution.model.0}; evaluator=${evaluator.0}; factory=${evolution.candidatesFactory.0}; populationSize=50}, \
	tests=${class=Population; evolutionModel=${evolution.model.1}; evaluator=${evaluator.2}; factory=${evolution.candidatesFactory.0}; populationSize=26}, \
	testsFactory=${evolution.individualsFactory.0}
	
# retrospection
retrospection.interaction = class=OthelloWPCInteraction, playBoth=true
experiment.retrospectionTask.0 = class=QueryRetrospectionTask, name=solutionMeu, query=${class=BestOfGenerationSolutionQuery}, \
	context=${class=ExpectedUtility; sampleSize=25000; evaluator=${retrospection.interaction}; factory=${evolution.candidatesFactory.0}}

# reports
reports.outputPath = /Users/pliskowski/Downloads/experiments/dfs-fs-sf/
reports.createSubdir = false

reports.0 = class = EvolutionHistoryReport
reports.1 = class = ExperimentConfiguration
reports.2 = class = ResultsTables, tasks=*
#reports.2 = class = ClusterTablesReport, clusterSize=120, tasks=*
reports.3 = class = TablesView, tasks=*
